import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';

class PersonalityClassService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// Fetch personality class description from Firestore
  static Future<Map<String, dynamic>?> getPersonalityClassDescription(String className) async {
    try {
      debugPrint('üîç Fetching personality class description for: $className');
      
      // Normalize class name to match Firestore document IDs
      final normalizedClassName = _normalizeClassName(className);
      
      // Try to get from personality_families collection first
      final familyDoc = await _firestore
          .collection('personality_families')
          .doc(normalizedClassName)
          .get();
      
      if (familyDoc.exists) {
        debugPrint('‚úÖ Found personality class in families collection');
        return familyDoc.data();
      }
      
      // If not found in families, try personality_descriptions collection
      final descDoc = await _firestore
          .collection('personality_descriptions')
          .doc(normalizedClassName)
          .get();
      
      if (descDoc.exists) {
        debugPrint('‚úÖ Found personality class in descriptions collection');
        return descDoc.data();
      }
      
      // If still not found, try to find by name field
      final querySnapshot = await _firestore
          .collection('personality_families')
          .where('name', isEqualTo: className)
          .limit(1)
          .get();
      
      if (querySnapshot.docs.isNotEmpty) {
        debugPrint('‚úÖ Found personality class by name query');
        return querySnapshot.docs.first.data();
      }
      
      debugPrint('‚ùå Personality class not found: $className');
      return null;
      
    } catch (e) {
      debugPrint('‚ùå Error fetching personality class description: $e');
      return null;
    }
  }

  /// Get all available personality classes
  static Future<List<Map<String, dynamic>>> getAllPersonalityClasses() async {
    try {
      debugPrint('üîç Fetching all personality classes...');
      
      final querySnapshot = await _firestore
          .collection('personality_families')
          .get();
      
      final classes = querySnapshot.docs
          .map((doc) => {
                'id': doc.id,
                ...doc.data(),
              })
          .toList();
      
      debugPrint('‚úÖ Found ${classes.length} personality classes');
      return classes;
      
    } catch (e) {
      debugPrint('‚ùå Error fetching all personality classes: $e');
      return [];
    }
  }

  /// Initialize personality families in Firestore if they don't exist
  static Future<bool> initializePersonalityFamilies() async {
    try {
      debugPrint('üîÑ Initializing personality families...');
      
      // Check if families already exist
      final existingFamilies = await _firestore
          .collection('personality_families')
          .limit(1)
          .get();
      
      if (existingFamilies.docs.isNotEmpty) {
        debugPrint('‚úÖ Personality families already exist');
        return true;
      }
      
      // Define personality families
      final families = [
        {
          'id': 'flower',
          'name': 'Flower',
          'description': 'Personnalit√© √©motionnelle, cr√©ative et empathique. Vous √™tes guid√© par vos sentiments et votre intuition, avec une forte capacit√© d\'expression artistique.',
          'characteristics': ['√âmotionnel', 'Cr√©atif', 'Empathique', 'Intuitif', 'Artistique'],
          'color': 0xFFE91E63,
          'icon': 'üå∏',
        },
        {
          'id': 'jewel',
          'name': 'Jewel',
          'description': 'Personnalit√© structur√©e, analytique et m√©thodique. Vous excellez dans l\'organisation et la planification, avec une approche logique des probl√®mes.',
          'characteristics': ['Structur√©', 'Analytique', 'M√©thodique', 'Logique', 'Organis√©'],
          'color': 0xFF2196F3,
          'icon': 'üíé',
        },
        {
          'id': 'shaker',
          'name': 'Shaker',
          'description': 'Personnalit√© dynamique, aventuri√®re et spontan√©e. Vous aimez l\'action, les d√©fis et n\'h√©sitez pas √† prendre des risques calcul√©s.',
          'characteristics': ['Dynamique', 'Aventurier', 'Spontan√©', '√ânergique', 'Audacieux'],
          'color': 0xFFFF9800,
          'icon': '‚ö°',
        },
        {
          'id': 'stream',
          'name': 'Stream',
          'description': 'Personnalit√© harmonieuse, collaborative et adaptable. Vous privil√©giez les relations humaines et l\'harmonie dans vos interactions.',
          'characteristics': ['Harmonieux', 'Collaboratif', 'Adaptable', 'Diplomate', 'Bienveillant'],
          'color': 0xFF4CAF50,
          'icon': 'üåä',
        },
        {
          'id': 'flower-jewel',
          'name': 'Flower-Jewel',
          'description': 'Profil cr√©atif-analytique. Vous combinez imagination et m√©thode, cr√©ativit√© et structure pour des r√©alisations exceptionnelles.',
          'characteristics': ['Cr√©atif-Analytique', 'M√©thodique-Artistique', 'Innovant-Structur√©'],
          'color': 0xFF9C27B0,
          'icon': 'üå∫üíé',
        },
        {
          'id': 'jewel-shaker',
          'name': 'Jewel-Shaker',
          'description': 'Profil analytique-dynamique. Vous alliez r√©flexion strat√©gique et action rapide, efficacit√© et innovation.',
          'characteristics': ['Analytique-Dynamique', 'Strat√©gique-Actif', 'Efficace-Innovant'],
          'color': 0xFF3F51B5,
          'icon': 'üíé‚ö°',
        },
        {
          'id': 'shaker-stream',
          'name': 'Shaker-Stream',
          'description': 'Profil dynamique-harmonieux. Vous √™tes un leader naturel qui sait motiver et f√©d√©rer autour de projets ambitieux.',
          'characteristics': ['Dynamique-Harmonieux', 'Leader-Collaboratif', 'Motivant-F√©d√©rateur'],
          'color': 0xFFFF5722,
          'icon': '‚ö°üåä',
        },
        {
          'id': 'stream-flower',
          'name': 'Stream-Flower',
          'description': 'Profil harmonieux-cr√©atif. Vous excellez dans la cr√©ation de liens √©motionnels et l\'expression artistique collective.',
          'characteristics': ['Harmonieux-Cr√©atif', 'Empathique-Artistique', 'Collaboratif-Expressif'],
          'color': 0xFF009688,
          'icon': 'üåäüå∏',
        },
      ];
      
      // Save each family to Firestore
      for (final family in families) {
        await _firestore
            .collection('personality_families')
            .doc(family['id'] as String)
            .set(family);
      }
      
      debugPrint('‚úÖ Personality families initialized successfully');
      return true;
      
    } catch (e) {
      debugPrint('‚ùå Error initializing personality families: $e');
      return false;
    }
  }

  /// Normalize class name for consistent lookup
  static String _normalizeClassName(String className) {
    return className
        .toLowerCase()
        .replaceAll(' ', '-')
        .replaceAll('_', '-');
  }

  /// Get personality class by various name formats
  static Future<Map<String, dynamic>?> findPersonalityClass(String className) async {
    try {
      // Try different name formats
      final variations = [
        className,
        className.toLowerCase(),
        _normalizeClassName(className),
        className.replaceAll('-', ' '),
        className.replaceAll('_', ' '),
      ];
      
      for (final variation in variations) {
        final result = await getPersonalityClassDescription(variation);
        if (result != null) {
          return result;
        }
      }
      
      return null;
    } catch (e) {
      debugPrint('‚ùå Error finding personality class: $e');
      return null;
    }
  }

  /// Create a fallback personality description if not found in Firestore
  static Map<String, dynamic> createFallbackDescription(String className) {
    return {
      'id': _normalizeClassName(className),
      'name': className,
      'description': 'Votre iris r√©v√®le une personnalit√© de type $className. Cette analyse est bas√©e sur les caract√©ristiques uniques de votre iris.',
      'characteristics': ['Unique', 'Authentique', 'Personnel'],
      'color': 0xFF607D8B, // Blue Grey
      'icon': 'üëÅÔ∏è',
      'source': 'fallback',
    };
  }
}
